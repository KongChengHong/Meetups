{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/daniel/meetup/pages/[meetupId]/index.js\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient, ObjectID } from 'mongodb';\nimport Head from 'next/head';\nimport { Fragment } from 'react';\n\nfunction MeetupDetails(props) {\n  console.log('props', props);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Highly active React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://user:12321@cluster0.pqx8t.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  console.log('meetups', meetups);\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  console.log('meetupId', meetupId); //fetch data for a single meetup\n\n  const client = await MongoClient.connect('mongodb+srv://user:12321@cluster0.pqx8t.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectID(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/daniel/meetup/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectID","Head","Fragment","MeetupDetails","props","console","log","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import MeetupDetail from '../../components/meetups/MeetupDetail';\nimport { MongoClient, ObjectID } from 'mongodb';\nimport Head from 'next/head';\nimport { Fragment } from 'react';\n\nfunction MeetupDetails(props) {\n    console.log('props', props);\n\n    return (\n        <Fragment>\n            <Head>\n                <title>React Meetups</title>\n                <meta\n                    name=\"description\"\n                    content=\"Highly active React Meetups\"\n                />\n            </Head>\n            <MeetupDetail\n                image={props.meetupData.image}\n                title={props.meetupData.title}\n                address={props.meetupData.address}\n                description={props.meetupData.description}\n            />\n        </Fragment>\n    );\n}\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect(\n        'mongodb+srv://user:12321@cluster0.pqx8t.mongodb.net/meetups?retryWrites=true&w=majority'\n    );\n    const db = client.db();\n    const meetupsCollection = db.collection('meetups');\n    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n    console.log('meetups', meetups);\n    client.close();\n\n    return {\n        fallback: false,\n        paths: meetups.map((meetup) => ({\n            params: {\n                meetupId: meetup._id.toString(),\n            },\n        })),\n    };\n}\n\nexport async function getStaticProps(context) {\n    const meetupId = context.params.meetupId;\n    console.log('meetupId', meetupId);\n\n    //fetch data for a single meetup\n    const client = await MongoClient.connect(\n        'mongodb+srv://user:12321@cluster0.pqx8t.mongodb.net/meetups?retryWrites=true&w=majority'\n    );\n    const db = client.db();\n    const meetupsCollection = db.collection('meetups');\n    const selectedMeetup = await meetupsCollection.findOne({\n        _id: ObjectID(meetupId),\n    });\n\n    client.close();\n\n    return {\n        props: {\n            meetupData: {\n                id: selectedMeetup._id.toString(),\n                title: selectedMeetup.title,\n                address: selectedMeetup.address,\n                description: selectedMeetup.description,\n                image: selectedMeetup.image,\n            },\n        },\n    };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}